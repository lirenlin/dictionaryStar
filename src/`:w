#include "tableModel.h"

TableModel::TableModel(QObject *parent)
    : QAbstractTableModel(parent)
{
    QHash<int, QByteArray> roleNames;
    roleNames[Qt::UserRole + 1] = QByteArray("name");
    roleNames[Qt::UserRole + 2] = QByteArray("content");
    setRoleNames(roleNames);
}

TableModel::TableModel(QList<Item> pairs, QObject *parent)
    : QAbstractTableModel(parent)
{
    listOfPairs=pairs;
}

int TableModel::rowCount(const QModelIndex &parent) const
{
    Q_UNUSED(parent);
    return listOfPairs.size();
}

int TableModel::columnCount(const QModelIndex &parent) const
{
    Q_UNUSED(parent);
    return 2;
}

QVariant TableModel::data(const QModelIndex &index, int role) const
{
    if (!index.isValid())
        return QVariant();

    if (index.row() >= listOfPairs.size() || index.row() < 0)
        return QVariant();

    QPair<QString, QString> pair = listOfPairs.at(index.row());
    switch(role) {
    case (Qt::UserRole + 1):
        return pair.first;
    case (Qt::UserRole + 2):
        return pair.second;
    default:
        return QVariant();
    }

}
void TableModel::addItem(Item item)
{
    int rows = listOfPairs.size();
    beginInsertRows(QModelIndex(), rows-1, rows);

    //listOfPairs.insert(rows, item);
    listOfPairs << item;

    endInsertRows();
}

void TableModel::clear()
{
    beginResetModel();

    listOfPairs.clear(row);

    endResetModel();

}

